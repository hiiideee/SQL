Database: Container of organized data
Tables: Structured list of data of specific type (not data type)
        Name should be unique (database name + table name)
Schema: Information about DB and table layouts and properties
Columns[Field]: Single field in a table with a datatype
Datatype: A type of allowed data
Rows[Record]: A record in a table
Primary Keys:(one or more) columns whose value uniquely define a row
             Always define a primary key
             unique
             No null Value
             Values in PK should never be updated or modified or reused

Retrieving Data (Row Start in Row 0)
SELECT col_name FROM tablename;
SELECT col_name1, col_name2, col_name3 FROM tablename;
SELECT * FROM tablename;
SELECT DISTINCT col_name FROM tablename; (Cant be partially when applied to multi-columns)
SELECT TOP 5 col_name FROM tablename; (Not equal for different SQL)
SELECT col_name FROM tablename WHERE ROWNUM <= 5;
SELECT col_name FROM tablename LIMIT 5 OFFSET 5;  or  LIMIT 5, 5;  (from n_1 to n_1 + n_2)
-- or #(One Line Comments)
/* */(Multi Lines Comments)

Sorting Retrived Data
SELECT col_name FROM tablename ORDER BY col_name; (ORDER BY should always be the lastest STATEMENT)
SELECT col_name1, col_name2, col_name3 FROM tablename ORDER BY col_name1, col_name2;(First would be consider first)
SELECT col_name1, col_name2, col_name3 FROM tablename ORDER BY 2, 3;(Column position, start from 1)
SELECT col_name FROM tablename ORDER BY col_name DESC; (in descending order z to a; default is ASC)
SELECT col_name FROM tablename ORDER BY col_name1 DESC, col_name2;(DESC only apply to the col_name that precede it)

Filtering Data
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 = val;
    =(equal);
    <>/!=(not equal);
    <(larger);
    <=(not larger than);
    !<(not less than);
    BETWEEN;
    IS NULL;
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 <> 'name';
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 BETWEEN 5 AND 10;
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 IS NULL;

Advanced Data Filtering
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 = 'name' AND col_name2 <> val;
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 = 'name' OR col_name2 <> val;
###In SQL, AND is before OR###
SELECT col_name1, col_name2 FROM tablename WHERE (col_name1 = 'name1' OR col_name1 = 'name2') AND col_name2 <> val;
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 IN ('name1', 'name2') ORDER by col_name2;
SELECT col_name1, col_name2 FROM tablename WHERE NOT col_name1 = 'name';

WildCard Filtering(Match Parts of a Value) (Only Used in Text Field)
Predicates / Operator
%: SELECT col_name1, col_name2 FROM tablename WHERE col_name1 LIKE 'A%'; (filter data with string that start by 'A')
    % matches any numbers of any occurance of any character
    (sometimes * replace %, Microsoft ACCESS for example);
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 LIKE '%A%';
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 LIKE '%nyu%@gmail.com';
(Except for NULL)
_: SELECT col_name1, col_name2 FROM tablename WHERE col_name1 LIKE 'A_'; (filter data with string that theres one character following 'A')
    _ matches 1 character
    (sometimes ? replace %, Microsoft ACCESS for example);
SELECT col_name1, col_name2 FROM tablename WHERE col_name1 LIKE 'A____';
[]:SELECT col_name1 FROM tablename WHERE col_name1 LIKE '[JM]%'; (means a set of characters)
[^]:SELECT col_name1 FROM tablename WHERE col_name1 LIKE '[^JM]%';(opposite from previous one)

Creating Calculated Fields
Concatenating: + or || (Join values together to form a single long value)
SELECT col_name1 + ' (' + col_name2 + ')' FROM tablename ORDER BY col_name1;
SELECT Concate(col_name1 , ' (' , col_name2 , ')') FROM tablename ORDER BY col_name1;(MySQL)
SELECT RTRIM(col_name1) + ' (' + RTRIM(col_name2) + ')' FROM tablename ORDER BY col_name1;(Delete padded space of column value)
Alias:AS (an alternate name for a new field)
SELECT col_name1 + ' (' + col_name2 + ')' AS col_name3 FROM tablename ORDER BY col_name1;(if name has multiple words, use 'new_name')

MatheMatics Calculation
SELECT col_name1, colname_2, col_name1 * col_name2 AS col_name3 FROM tablename WHERE col_name = val;

Using Data Manipulation Functions(Super DBMS specifics)
Text / Numerical / Data and Time / System Information about DBMS
Text:
    LTRIM(); RTRIM(); UPPER(); LENGTH(); LEFT(); LOWER(); 
Date and Time:
 
Numerical:
    ABS(); COS(); EXP(); PI(); SIN(); SQRT(); TAN();
    
Summarizing Data(Aggregating Function)
    AVG(); (Ignore NULL)
    COUNT(); (COUNT(*) counts NULL; COUNT(col_name) ignore NULL)
    MAX(); 
    MIN(); 
    SUM();
Aggregating on Distinct Value:
ALL(default)/DISTINCT(Dont use with *)
    SELECT AVG(DISTINCT col_name1) AS col_name2 FROM tablename WHERE NOT col_name1 IS NULL;
    
Grouping Data
Group by:
    SELECT col_name1, COUNT(*) AS col_name2 FROM tablename GROUP BY col_name1;
    GROUP BY contains any columns you want; Every Column used in Group By should be used in SELECT, same Calculation;
    NULL will be grouped as a new group; WHERE < GROUP BY < ORDER BY in position;
Filtering Group: HAVING
    SELECT col_name1, COUNT(*) AS col_name2 FROM tablename GROUP BY col_name1 HAVING COUNT(*) >= 2;
    HAVING is after GROUP BY;
    SELECT col_name1, COUNT(*) AS col_name2 FROM tablename WHERE col_name1 > val_1 GROUP BY col_name1 HAVING COUNT(*) > val_2;

Working with Subqueries
Query: Any STATEMENT / SubQuery: Queries embedded into other Queries (start from innermost to outter)
Filtering By Subqueries:
    #we want the customer id who ordered item 0001
    1.SELECT num FROM order WHERE item = '0001';
    2.SELECT cust_id FROM customer WHERE num IN (result above);
    #Combine them:
    SELECT cust_id FROM customer WHERE num IN (SELECT num FROM order WHERE item = '0001')
    Subquery SELECTION ONLY return single column
Using Subqueries as Calculated Field:
    #Display total number of orders placed by every customer
    1.SELECT COUNT(*) FROM customer WHERE cust_id = '???';
    ...
    #Combine them:
    SELECT cust_name, cust_state, (SELECT COUNT(*) FROM order WHERE order.cust_id = customer.cust_id) AS cust_order FROM customer Order BY cust_name;
    
Joining Tables
Relational Tables: Information are splited into several tables, one for each data type, and tables are related through common value
Join: Retrieve Data from rational tables with a single SELECT STATEMENT
    SELECT vend_name, prod_name, prod_price FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id;
Cross Join: Join without WHERE, so theres a multi-multi relation between two tables
Inner Join:(Same as standard Join)
    SELECT vend_name, prod_name, prod_price FROM Vendors INNER JOIN Products ON Venders.vend_id = Products.vend_id;
Joining Multiple Tables:
    SELECT A_1, A_2, B_1, C_1 FROM A, B, C WHERE A.common = B.common AND B.cooo = C.cooo;
    
Creating Advanced Joins
Using Table Aliases:
    SELECT cust_id, cust_num FROM Customer AS C, Orders AS O, OrderItems AS OI WHERE C.num = O.num AND O.items = OI.items AND items = '01';
Using Different Join Types:
Self Join:
    SELECT id, name, contact FROM Customer WHERE name = (SELECT name FROM Customer WHERE contact = 'J');
    SELECT c1.id, c1.name, c1.contact FROM Customer AS c1, Customer AS c2 WHERE c1.name = c2.name AND c2.contact = 'J';
Natural Join:
    SELECT C.*, O.item, O.date, OI.id, OI.q, OI.price FROM Customer AS C, Orders AS O, OrderItem As OI WHERE C.id = O.id AND OI.num = O.num AND id = 'Id';
Outer Join: Join include table rows that have no associated rows in the related table
    SELECT Customer.id, Order.item FROM Customer LEFT OUTER JOIN Orders ON Customer.id = Order.id;
    SELECT Customer.id, Order.item FROM Customer FULL OUTER JOIN Orders ON Customer.id = Order.id;
Join with Aggregate Functions:
    SELECT Customer.id, COUNT(Order.item) AS Item FROM Customer INNER JOIN Orders ON Customer.id = Order.id GROUP BY Customer.id;
    
Combining Queries:(Use UNION to combine multiple SELECT Statement to one result set)
Creating Combined Queries:
    1.SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z');
    2.SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name';
    Combine:
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z')
    UNION
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name';
    Which is Same as :
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name' OR 1_col_4 IN ('a', 'z');
    
    Rules:
    A UNION has two or more SELECT STATEMENT, each seperated by UNION;
    Each query in a UNION must contain same columns, expressions or aggregate functions;
    Datatype should be compatible;
Including / Eliminating Duplicate Rows(Default):
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z')
    UNION ALL
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name';
Sorting Combined Queries Result:(Must occur after the Final SELECT Statement)
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z')
    UNION
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name'
    ORDER BY 1_col_1, 1_col_2;
Union Except:(contains former queries which are not in latter query)
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z')
    UNION EXCEPT
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name';
Union Except:(Intersect Set)
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_4 IN ('a', 'z')
    UNION INTERSECT
    SELECT 1_col_1, 1_col_2, 1_col_3 FROM table_1 WHERE 1_col_1 = 'name';

Inserting Data:INSERT(add row to database) --- partial row / complete row / a result query
Complete Row:
    INSERT INTO tablename VALUES('v_1', 'v_2', 'v_3', 'str_1', 'str_2', NULL, 'date_1'); (must be in order)
    INSERT INTO tablename(col_1, col_2, col_3, col_4, col_5) VALUES('v_1', 'v_2', 'str_1', NULL, 'date_1' );(this is better)
Partial Row:
    INSERT INTO tablename(col_1, col_2) VALUES('v_1', 'date_1' ); (The missing columns allow NULL or have default value)
Inserting Retrieved Data:
    INSERT INTO new_table(col_1, col_2) SELECT col_1, col_2 FROM old_table;(if PK duplicate for two table, fail for INSERT)
Copying from One Table to Another:SELECT INTO
    SELECT * INTO copytable FROM table;
    CREATE TABLE copytable AS SELECT * FROM table;
    (data only will be copied into one table)

Updating and Deleting Data:

     



